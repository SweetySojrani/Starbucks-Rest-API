### Week 1

Discuss about the application domain and split microservices to team members.

- Vera
  - Research on Order feature and decide on which NoSQL database to use
  - Research on popular frontend framework
- Yinghua
  - Looked into the Go sample code from professor

### Week 2

Discuss about the application domain and split microservices to team members.

- Yinghua
  - Created the MongoDB data collection "cmpe281"
  - Added some testing login acount into the MongoDB data collection "cmpe281"
  
### Week 3

Discuss about the application domain and split microservices to team members.

- Yinghua
  - Created test cases for successful login
  - Created test cases for failed login (wrong password)
  - Created the Go login API by modifying the Go sample code

Nodes: 
- Hey Team, I have the first version Go Login API ready. However, it is connecting to my MongoDB cluster.  To keep all those EC2 instances up and running will cost too much $.  So I plan to refactor the first version to the second version with a "Strategy" pattern.  :slightly_smiling_face:  The "Strategy" pattern will have two strategies: Production and Dev.  For Dev mode, the app would check a list of accounts without connecting to the MongoDB.  For production mode,  it will connect to my MongoDB cluster. 



### Week 4  (planning)

Discuss about the application domain and split microservices to team members.

- Yinghua
  - To create a strategy pattern on the Go API so that I could switch the production mode and Dev mode
  - For the Dev mode, it will check a fix list of login account without connecting to MongoDB
  - For the production mode, it will check the MongoDB data. 
  - The purpose of this stratey pattern is to say some EC2 instance hours. :) 

  
   
